/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
@import url(../assets/common.css);
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

h1 {
  font-size: 1.52343rem;
  line-height: 1.125;
  margin-top: 1.875rem;
  margin-bottom: 0.75rem;
}

h2 {
  font-size: 1.333rem;
  line-height: 1.125;
  margin-top: 1.875rem;
  margin-bottom: 0.75rem;
}

h3 {
  font-size: 1.14286rem;
  line-height: 1.125;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
}

html {
  font-size: 87.5%;
  line-height: 1.5;
}

/* Colors
==============================================*/
/* Breakpoints
==============================================*/
.load-animation div {
  position: absolute;
  display: block;
  width: 2em;
  height: 2em;
  margin: 0.25em;
  border: 0.25em solid;
  border-color: #333333 transparent transparent transparent;
  border-radius: 50%;
  -webkit-animation: load-animation 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
          animation: load-animation 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
}

.load-animation div:nth-child(1) {
  -webkit-animation-delay: -0.45s;
          animation-delay: -0.45s;
}

.load-animation div:nth-child(2) {
  -webkit-animation-delay: -0.3s;
          animation-delay: -0.3s;
}

.load-animation div:nth-child(3) {
  -webkit-animation-delay: -0.15s;
          animation-delay: -0.15s;
}

@-webkit-keyframes pulse {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
  }
}

@keyframes pulse {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
  }
}

@-webkit-keyframes pulse-load-more {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
  }
}

@keyframes pulse-load-more {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
  }
}

.load-animation {
  display: none;
  width: 2.5em;
  height: 2.5em;
  position: absolute;
  top: calc(50% - 1.25em);
  left: calc(50% - 1.25em);
  z-index: 10;
}

.js-ajax-running .load-animation {
  display: block;
}

@-webkit-keyframes load-animation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

@keyframes load-animation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

.icon {
  display: inline-block;
  vertical-align: middle;
}

.button {
  display: inline-block;
  padding: 0.75rem;
  line-height: 1;
  color: inherit;
  font-family: inherit;
  text-align: center;
  vertical-align: middle;
  text-decoration: none;
  background-color: #eeeeee;
  background-image: none;
  border: none;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}

.button--fluid {
  display: block;
  max-width: unset;
}

.button--centered {
  display: block;
  max-width: 200px;
  margin: 1.5rem auto;
}

.button--load-more {
  position: relative;
}

.button--disabled, .button:disabled {
  opacity: 0.3;
  cursor: not-allowed;
}

.page--no-touch .button:hover {
  opacity: 0.7;
}

.page--no-touch .button--disabled:hover,
.page--no-touch .button:disabled {
  opacity: 0.3;
}

.menu__list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin: 0;
  padding: 0;
  list-style-type: none;
}

.page {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  height: 100%;
}

.page--no-scroll {
  overflow: hidden;
}

.page__body {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  min-width: 320px;
  height: 100%;
  min-height: 100vh;
  margin: 0 auto;
  font-size: 1rem;
  font-family: Arial, sans-serif;
  color: #000000;
  background-color: #fafafa;
}

.page__content {
  width: calc(8.25rem + (100% - 8.25rem));
  max-width: 480px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  width: 100%;
  min-width: 0;
}

.page__header,
.page__footer {
  -ms-flex-negative: 0;
      flex-shrink: 0;
  width: 100%;
  min-width: 0;
}

*,
*:before,
*:after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}

.main-header {
  background-color: #f1f1f1;
}

.main-header__top {
  width: calc(8.25rem + (100% - 8.25rem));
  max-width: 480px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  background-color: rgba(0, 0, 0, 0.1);
}

.main-header__banner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  min-height: 200px;
  background-color: rgba(0, 0, 0, 0.05);
}

.main-header__bottom {
  width: calc(8.25rem + (100% - 8.25rem));
  max-width: 480px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  background-color: rgba(0, 0, 0, 0.1);
}

.main-footer {
  background-color: #f1f1f1;
}

.main-footer__inner {
  width: calc(8.25rem + (100% - 8.25rem));
  max-width: 480px;
  margin-right: auto;
  margin-left: auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  background-color: rgba(0, 0, 0, 0.1);
}

.card {
  width: 100%;
  max-width: 300px;
  background-color: #f1f1f1;
}

.card__top {
  position: relative;
}

.card__img {
  display: block;
  width: 100%;
  height: 100%;
  min-height: 200px;
  background-color: #eaeaea;
  -o-object-fit: cover;
     object-fit: cover;
}

.card__label {
  position: absolute;
  left: 10px;
  top: 10px;
  padding: 0.4875rem;
  line-height: 1;
  background-color: #f1f1f1;
}

.card__play-link {
  position: absolute;
  left: calc(50% - 1.25em);
  bottom: -1.25em;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  width: 2.5em;
  height: 2.5em;
  font-size: 20px;
  text-decoration: none;
  background-color: #cccccc;
}

.card__bottom {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  padding: 0.75rem;
  padding-top: 2.25rem;
}

.card__column {
  width: calc(0.75rem + ((100% - 2.25rem) / 4 * 2));
  margin-right: 0.75rem;
}

.card__column:last-child {
  margin-right: 0;
}

.card__title {
  width: 100%;
  margin: 0;
}

.card__rating-title {
  overflow: hidden;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  margin: 0;
  text-align: center;
}

.card-list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  margin: 0;
  margin-bottom: -0.75rem;
  padding: 0;
  list-style-type: none;
}

.card-list__item {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  width: 100%;
  margin-bottom: 0.75rem;
}

@media (min-width: 30em) {
  .card-list__item {
    width: calc(((100% - 0.75rem) / 2 * 1));
    margin-right: 0.75rem;
  }
  .card-list__item:nth-child(2n) {
    margin-right: 0;
  }
}

@media all and (min-width: 640px) {
  h1 {
    font-size: 1.77689rem;
    line-height: 1.25;
  }
  h2 {
    font-size: 1.333rem;
    line-height: 1.25;
  }
  h3 {
    font-size: 1.14286rem;
    line-height: 1.25;
  }
  html {
    font-size: 100%;
  }
}

@media screen and (min-width: 40em) {
  .page__content {
    max-width: 640px;
  }
  .main-header__top {
    max-width: 640px;
  }
  .main-header__bottom {
    max-width: 640px;
  }
  .main-footer__inner {
    max-width: 640px;
  }
}

@media screen and (min-width: 48em) {
  .page__content {
    max-width: 768px;
  }
  .main-header__top {
    max-width: 768px;
  }
  .main-header__bottom {
    max-width: 768px;
  }
  .main-footer__inner {
    max-width: 768px;
  }
}

@media (min-width: 48em) {
  .card-list__item {
    width: calc(((100% - 1.5rem) / 3 * 1));
  }
  .card-list__item:nth-child(2n) {
    margin-right: 0.75rem;
  }
  .card-list__item:nth-child(3n) {
    margin-right: 0;
  }
}

@media screen and (min-width: 64em) {
  .page__content {
    max-width: 1024px;
  }
  .main-header__top {
    max-width: 1024px;
  }
  .main-header__bottom {
    max-width: 1024px;
  }
  .main-footer__inner {
    max-width: 1024px;
  }
}

@media (min-width: 64em) {
  .card-list__item {
    width: calc(((100% - 2.25rem) / 4 * 1));
  }
  .card-list__item:nth-child(3n) {
    margin-right: 0.75rem;
  }
  .card-list__item:nth-child(4n) {
    margin-right: 0;
  }
}

@media screen and (min-width: 75em) {
  .page__content {
    max-width: 1200px;
  }
  .main-header__top {
    max-width: 1200px;
  }
  .main-header__bottom {
    max-width: 1200px;
  }
  .main-footer__inner {
    max-width: 1200px;
  }
}

@media screen and (min-width: 85.375em) {
  .page__content {
    max-width: 1280px;
  }
  .main-header__top {
    max-width: 1280px;
  }
  .main-header__bottom {
    max-width: 1280px;
  }
  .main-footer__inner {
    max-width: 1280px;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
